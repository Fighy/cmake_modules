set(TOOLCHAIN_VARS ${CMAKE_CURRENT_BINARY_DIR}/export/toolchain_vars.cmake)
set(OPENCMISS_CONTEXT ${CMAKE_CURRENT_BINARY_DIR}/export/context.cmake)

function(do_export CFILE)
    message(STATUS "Exporting OpenCMISS info: ${CFILE}")
    file(WRITE ${CFILE} "#Exported OpenCMISS configuration\r\n")
    file(APPEND ${CFILE} "#DO NOT EDIT THIS FILE. ITS GENERATED BY THE OPENCMISS BUILD ENVIRONMENT\r\n")
    foreach(VARNAME ${EXPORT_VARS})
        if (DEFINED ${VARNAME})
            # Flags need to be in quotes
            if (VARNAME MATCHES "^CMAKE_.*_FLAGS.*")
                file(APPEND ${CFILE} "set(${VARNAME} \"${${VARNAME}}\")\r\n")
            else()
                file(APPEND ${CFILE} "set(${VARNAME} ${${VARNAME}})\r\n")
            endif()
        endif()    
    endforeach()
endfunction()

# Toolchain config first
set(EXPORT_VARS 
    CMAKE_C_COMPILER CMAKE_CXX_COMPILER CMAKE_Fortran_COMPILER
    CMAKE_C_FLAGS CMAKE_CXX_FLAGS CMAKE_Fortran_FLAGS
    CMAKE_C_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELEASE CMAKE_Fortran_FLAGS_RELEASE
    CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG CMAKE_Fortran_FLAGS_DEBUG
    MPI MPI_HOME MPI_BUILD_TYPE FORTRAN_MANGLING
    OCM_SYSTEM_MPI
)
foreach(lang C CXX Fortran)
    list(APPEND EXPORT_VARS 
        MPI_${lang}_COMPILER
        MPI_${lang}_LIBRARIES
        MPI_${lang}_INCLUDE_PATH
        MPI_${lang}_COMPILE_FLAGS
    ) 
endforeach()
do_export(${TOOLCHAIN_VARS})

# Build config second    
set(EXPORT_VARS
    CMAKE_POSITION_INDEPENDENT_CODE
    OPENCMISS_PREFIX_PATH
    OCM_USE_MT OCM_SYSTEM_MPI
    OPENCMISS_COMPONENTS BLA_VENDOR
    OPENCMISS_CMAKE_MIN_VERSION
    OPENCMISS_BUILD_SHARED_LIBS
    CMAKE_COMMAND)
# Add the build type if on single-config platform
if (DEFINED CMAKE_BUILD_TYPE AND NOT "" STREQUAL CMAKE_BUILD_TYPE)
    set(OPENCMISS_BUILD_TYPE ${CMAKE_BUILD_TYPE})
    list(APPEND EXPORT_VARS OPENCMISS_BUILD_TYPE)
endif() 
foreach(OCM_COMP ${OPENCMISS_COMPONENTS})
    list(APPEND EXPORT_VARS OCM_USE_${OCM_COMP} OCM_SYSTEM_${OCM_COMP})
    # Export the "correct" cased names for components as well (we have solely uppercase names,
    # but some packages have case-sensitive names like LibXml2 :-(
    if (${OCM_COMP}_CASENAME)
        list(APPEND EXPORT_VARS ${OCM_COMP}_CASENAME)
    endif()
    if (${OCM_COMP}_VERSION)
        list(APPEND EXPORT_VARS ${OCM_COMP}_VERSION)
    endif()
endforeach()

# OpenCMISS find modules - wrapper and extra find library scripts
list(APPEND EXPORT_VARS OPENCMISS_MODULE_PATH)

do_export(${OPENCMISS_CONTEXT})
unset(EXPORT_VARS)